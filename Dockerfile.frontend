# Stage 1: Build the application using Rust and Trunk
FROM rust:latest AS builder

# Add the wasm target for Rust
RUN rustup target add wasm32-unknown-unknown

# Install Trunk
RUN cargo install --locked trunk

# Create necessary directories
RUN mkdir -p /app/{frontend,shared}

# Copy the shared and frontend project files
ADD ./app/shared/src /app/shared/src/
ADD ./app/shared/Cargo.toml /app/shared/
ADD ./app/frontend/src /app/frontend/src/
ADD ./app/frontend/Cargo.toml ./app/frontend/Trunk.toml ./app/frontend/index.html ./app/frontend/index.scss /app/frontend/

# Copy static assets like scripts or images if present
ADD app/frontend/assets /app/frontend/assets/

# Set the working directory to frontend
WORKDIR /app/frontend

# Build the application using Trunk in release mode
RUN trunk build --release

# Stage 2: Serve the application with Nginx
FROM nginx:alpine

# Copy the built files from the first stage to the Nginx default directory
COPY --from=builder /app/frontend/dist /usr/share/nginx/html

# Copy the custom Nginx server configuration to the conf.d directory
COPY etc/nginx/default.conf /etc/nginx/conf.d/default.conf

# Expose port 8000 to maintain compatibility with the previous Dockerfile
EXPOSE 8000

# Command to run Nginx in the foreground
CMD ["nginx", "-g", "daemon off;"]
