# syntax=docker/dockerfile:1

# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Dockerfile reference guide at
# https://docs.docker.com/go/dockerfile-reference/

ARG RUST_VERSION=1.78.0
ARG APP_NAME=symracing_virtual_mentor_backend
ARG SHARED_LIB_NAME=shared

################################################################################
# xx is a helper for cross-compilation.
# See https://github.com/tonistiigi/xx/ for more information.
FROM --platform=$BUILDPLATFORM tonistiigi/xx:1.4.0 AS xx

################################################################################
# Create a stage for building the application.
FROM --platform=$BUILDPLATFORM rust:${RUST_VERSION}-alpine AS build
ARG APP_NAME
ARG SHARED_LIB_NAME
ARG CARGO_NET_GIT_FETCH_WITH_CLI=true

WORKDIR /app/${APP_NAME}
RUN mkdir -p /app/${SHARED_LIB_NAME}

# Copy cross compilation utilities from the xx stage.
COPY --from=xx / /

# Install host build dependencies.
RUN apk add --no-cache clang lld musl-dev git file openssh-client

# This is the architecture youâ€™re building for, which is passed in by the builder.
# Placing it here allows the previous steps to be cached across architectures.
ARG TARGETPLATFORM

# Install cross compilation build dependencies.
RUN xx-apk add --no-cache musl-dev gcc

RUN mkdir -p -m 0600 ~/.ssh && ssh-keyscan github.com >> ~/.ssh/known_hosts

# Build the application.
# Leverage a cache mount to /usr/local/cargo/registry/
# for downloaded dependencies, a cache mount to /usr/local/cargo/git/db
# for git repository dependencies, and a cache mount to /app/target/ for 
# compiled dependencies which will speed up subsequent builds.
# Leverage a bind mount to the src directory to avoid having to copy the
# source code into the container. Once built, copy the executable to an
# output directory before the cache mounted /app/target is unmounted.
RUN --mount=type=bind,source=backend/src,target=/app/${APP_NAME}/src \
    --mount=type=bind,source=backend/Cargo.toml,target=/app/${APP_NAME}/Cargo.toml \
    --mount=type=bind,source=backend/Cargo.lock,target=/app/${APP_NAME}/Cargo.lock \
    --mount=type=bind,source=shared/src,target=/app/${SHARED_LIB_NAME}/src \
    --mount=type=bind,source=shared/Cargo.toml,target=/app/${SHARED_LIB_NAME}/Cargo.toml \
    --mount=type=bind,source=shared/Cargo.lock,target=/app/${SHARED_LIB_NAME}/Cargo.lock \
    --mount=type=cache,target=/app/${APP_NAME}/target/,id=rust-cache-${APP_NAME}-${TARGETPLATFORM} \
    --mount=type=cache,target=/usr/local/cargo/git/db \
    --mount=type=cache,target=/usr/local/cargo/registry/ \
    --mount=type=ssh \
    <<EOF
set -e
xx-cargo build --locked --release --target-dir ./target
cp ./target/$(xx-cargo --print-target-triple)/release/$APP_NAME /bin/server
xx-verify /bin/server
EOF

################################################################################
# Create a new stage for running the application that contains the minimal
# runtime dependencies for the application. This often uses a different base
# image from the build stage where the necessary files are copied from the build
# stage.
#
# The example below uses the alpine image as the foundation for running the app.
# By specifying the "3.20" tag, it will use version 3.20 of alpine. If
# reproducability is important, consider using a digest
# (e.g., alpine@sha256:664888ac9cfd28068e062c991ebcff4b4c7307dc8dd4df9e728bedde5c449d91).
FROM alpine:3.20 AS final

ARG APP_NAME
ARG SHARED_LIB_NAME

# Create a non-privileged user that the app will run under.
# See https://docs.docker.com/go/dockerfile-user-best-practices/
ARG UID=10001
RUN adduser \
    --disabled-password \
    --gecos "" \
    --home "/nonexistent" \
    --shell "/sbin/nologin" \
    --no-create-home \
    --uid "${UID}" \
    appuser

#######################################################
# Copy configuration file
ENV CONFIG_DIR=/etc/$APP_NAME/
RUN mkdir -p $CONFIG_DIR
COPY ./backend/backend-config.yaml $CONFIG_DIR
ENV BACKEND_CONFIG_PATH=$CONFIG_DIR/backend-config.yaml
#######################################################

USER appuser

# Copy the executable from the "build" stage.
COPY --from=build /bin/server /bin/

# Expose the port that the application listens on.
EXPOSE 6666

# What the container should run when it is started.
CMD ["/bin/server"]
